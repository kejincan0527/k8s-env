---
rbac:
  create: true
nodeExporter:
  extraArgs:
    "collector.textfile.directory": "/srv/txt_collector"
  extraHostPathMounts:
    - name: textfile-dir
      mountPath: /srv/txt_collector
      hostPath: /var/lib/node-exporter
      readOnly: true
server:
  persistentVolume:
    accessModes: [ ReadWriteMany ]
    storageClass: slow
  extraHostPathMounts:
    - name: extra-certs-dir
      mountPath: /etc/etcd/pki
      hostPath: /etc/etcd/pki
      readOnly: true
alertmanager:
  persistentVolume:
    accessModes: [ ReadWriteMany ]
    storageClass: slow
serverFiles:
  alerts: |-
    ALERT AIRFLOW_TEMPERATURE_CEL_INVALID
      IF airflow_temperature_cel_threshold - airflow_temperature_cel_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of airflow_temperature_cel_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT COMMAND_TIMEOUT_INVALID
      IF command_timeout_threshold - command_timeout_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of command_timeout_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT CURRENT_PENDING_SECTOR_INVALID
      IF current_pending_sector_threshold - current_pending_sector_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of current_pending_sector_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT END_TO_END_ERROR_INVALID
      IF end_to_end_error_threshold - end_to_end_error_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of end_to_end_error_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT ERASE_FAIL_COUNT_INVALID
      IF erase_fail_count_threshold - erase_fail_count_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of erase_fail_count_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT G_SENSE_ERROR_RATE_INVALID
      IF g_sense_error_rate_threshold - g_sense_error_rate_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of g_sense_error_rate_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT HARDWARE_ECC_RECOVERED_INVALID
      IF hardware_ecc_recovered_threshold - hardware_ecc_recovered_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of hardware_ecc_recovered_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT HOST_READS_MIB_INVALID
      IF host_reads_mib_threshold - host_reads_mib_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of host_reads_mib_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT HOST_READS_32MIB_INVALID
      IF host_reads_32mib_threshold - host_reads_32mib_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of host_reads_32mib_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT HOST_WRITES_MIB_INVALID
      IF host_writes_mib_threshold - host_writes_mib_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of host_writes_mib_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT HOST_WRITES_32MIB_INVALID
      IF host_writes_32mib_threshold - host_writes_32mib_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of host_writes_32mib_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT LOAD_CYCLE_COUNT_INVALID
      IF load_cycle_count_threshold - load_cycle_count_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of load_cycle_count_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT MEDIA_WEAROUT_INDICATOR_INVALID
      IF media_wearout_indicator_threshold - media_wearout_indicator_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of media_wearout_indicator_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT NAND_WRITES_1GIB_INVALID
      IF nand_writes_1gib_threshold - nand_writes_1gib_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of nand_writes_1gib_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT OFFLINE_UNCORRECTABLE_INVALID
      IF offline_uncorrectable_threshold - offline_uncorrectable_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of offline_uncorrectable_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT POWER_CYCLE_COUNT_INVALID
      IF power_cycle_count_threshold - power_cycle_count_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of power_cycle_count_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT POWER_ON_HOURS_INVALID
      IF power_on_hours_threshold - power_on_hours_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of power_on_hours_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT PROGRAM_FAIL_COUNT_INVALID
      IF program_fail_count_threshold - program_fail_count_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of program_fail_count_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT RAW_READ_ERROR_RATE_INVALID
      IF raw_read_error_rate_threshold - raw_read_error_rate_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of raw_read_error_rate_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT REALLOCATED_SECTOR_CT_INVALID
      IF reallocated_sector_ct_threshold - reallocated_sector_ct_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of reallocated_sector_ct_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT REPORTED_UNCORRECT_INVALID
      IF reported_uncorrect_threshold - reported_uncorrect_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of reported_uncorrect_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT SATA_DOWNSHIFT_COUNT_INVALID
      IF sata_downshift_count_threshold - sata_downshift_count_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of sata_downshift_count_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT SPIN_RETRY_COUNT_INVALID
      IF spin_retry_count_threshold - spin_retry_count_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of spin_retry_count_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT SPIN_UP_TIME_INVALID
      IF spin_up_time_threshold - spin_up_time_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of spin_up_time_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT START_STOP_COUNT_INVALID
      IF start_stop_count_threshold - start_stop_count_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of start_stop_count_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT TEMPERATURE_CELSIUS_INVALID
      IF temperature_celsius_threshold - temperature_celsius_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of temperature_celsius_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT TOTAL_LBAS_READ_INVALID
      IF total_lbas_read_threshold - total_lbas_read_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of total_lbas_read_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT TOTAL_LBAS_WRITTEN_INVALID
      IF total_lbas_written_threshold - total_lbas_written_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of total_lbas_written_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT UDMA_CRC_ERROR_COUNT_INVALID
      IF udma_crc_error_count_threshold - udma_crc_error_count_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of udma_crc_error_count_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT UNSAFE_SHUTDOWN_COUNT_INVALID
      IF unsafe_shutdown_count_threshold - unsafe_shutdown_count_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of unsafe_shutdown_count_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT WORKLD_HOST_READS_PERC_INVALID
      IF workld_host_reads_perc_threshold - workld_host_reads_perc_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of workld_host_reads_perc_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT WORKLD_MEDIA_WEAR_INDIC_INVALID
      IF workld_media_wear_indic_threshold - workld_media_wear_indic_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of workld_media_wear_indic_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }
    ALERT WORKLOAD_MINUTES_INVALID
      IF workload_minutes_threshold - workload_minutes_value > 0
      FOR 30s
      ANNOTATIONS {
        summary = "Abnormal state of workload_minutes_value",
        description = "Abnormal state on {{$labels.instance}} for disk {{$labels.name}} (current value: {{$value}})"
      }

  prometheus.yml: |-
    rule_files:
      - /etc/config/rules
      - /etc/config/alerts

    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets:
            - localhost:9090

      # A scrape configuration for running Prometheus on a Kubernetes cluster.
      # This uses separate scrape configs for cluster components (i.e. API server, node)
      # and services to allow each to use different authentication configs.
      #
      # Kubernetes labels will be added as Prometheus labels on metrics via the
      # `labelmap` relabeling action.

      # Scrape config for API servers.
      #
      # Kubernetes exposes API servers as endpoints to the default/kubernetes
      # service so this uses `endpoints` role and uses relabelling to only keep
      # the endpoints associated with the default/kubernetes service using the
      # default named port `https`. This works for single API server deployments as
      # well as HA API server deployments.
      - job_name: 'kubernetes-apiservers'

        kubernetes_sd_configs:
          - role: endpoints

        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https

        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        # Keep only the default/kubernetes service endpoints for the https port. This
        # will add targets for each API server which Kubernetes adds an endpoint to
        # the default/kubernetes service.
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'

        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https

        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
          - role: endpoints

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: (.+)(?::\d+);(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name

      - job_name: 'prometheus-pushgateway'
        honor_labels: true

        kubernetes_sd_configs:
          - role: service

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: pushgateway

      # Example scrape config for probing services via the Blackbox Exporter.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/probe`: Only probe services that have a value of `true`
      - job_name: 'kubernetes-services'

        metrics_path: /probe
        params:
          module: [http_2xx]

        kubernetes_sd_configs:
          - role: service

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_name

      # Example scrape config for pods
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      - job_name: 'kubernetes-pods'

        kubernetes_sd_configs:
          - role: pod

        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: (.+):(?:\d+);(\d+)
            replacement: ${1}:${2}
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      - job_name: 'etcd-nodes'

        scheme: https

        tls_config:
          ca_file: '/etc/etcd/pki/ca.crt'
          cert_file: '/etc/etcd/pki/etcd-client.crt'
          key_file: '/etc/etcd/pki/etcd-client.key'

        static_configs:
          - targets: ['192.168.1.111:2379','192.168.1.112:2379','192.168.1.113:2379']
