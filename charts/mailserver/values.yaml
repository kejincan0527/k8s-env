name: mailserver
hostname: mail.example.com

opendkim: []
# - key: |
#     -----BEGIN RSA PRIVATE KEY-----
#     XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#     -----END RSA PRIVATE KEY-----
#   domainkeyHost: mail._domainkey.example.com
#   domain: "example.com"

image:
  repository: tvial/docker-mailserver
  tag: 2.3
  pullPolicy: Always
replicas: 1

accounts:
  - account: "user1@example.com"
    password: "{SHA512-CRYPT}$6$2YpW1nYtPBs2yLYS$z.5PGH1OEzsHHNhl3gJrc3D.YMZkvKw/vp.r5WIiwya6z7P/CQ9GDEJDr2G2V0cAfjDFeAQPUoopsuWPXLk3u1"
aliases:
  - from: "alias@example.com"
    to: "user1@example.com"

env:
  ENABLE_SPAMASSASSIN: "1"
  # ENABLE_CLAMAV: "1"
  ENABLE_POSTGREY: "1"

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 64Mi
  # requests:
  #   cpu: 100m
  #   memory: 64Mi

nodeSelector: {}

service:
  type: ClusterIP
  smtpPort: 25
  smtpAuthPort: 587
  imapSecurePort: 993

proxyProtocol:
  trustedProxyNetwork: 192.168.0.0/16
  enabled: false

letsEncrypt:
  enabled: false
  ingress:
    backend:
      serviceName: ""
      servicePort: 80
    annotations: {}
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: 'true'

persistentVolume:
  ## If true, mailserver will create/use a Persistent Volume Claim
  ## If false, use emptyDir
  ##
  enabled: true

  ## mailserver data Persistent Volume access modes
  ## Must match those of existing PV or dynamic provisioner
  ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  accessModes:
    - ReadWriteMany

  ## mailserver data Persistent Volume Claim annotations
  ##
  annotations: {}

  ## mailserver data Persistent Volume existing claim name
  ## Requires mailserver.persistentVolume.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim: ""

  ## mailserver data Persistent Volume size
  ##
  size: 2Gi

  ## mailserver data Persistent Volume Storage Class
  ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
  ## Default: volume.alpha.kubernetes.io/storage-class: default
  ##
  storageClass: ""

defaultBackend:

  ## If false, controller.defaultBackendService must be provided
  ##
  enabled: true

  name: default-backend
  image:
    repository: gcr.io/google_containers/defaultbackend
    tag: "1.3"
    pullPolicy: IfNotPresent

  extraArgs: {}

  ## Node labels for default backend pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Annotations to be added to default backend pods
  ##
  podAnnotations: {}

  replicaCount: 1

  resources: {}
    # limits:
    #   cpu: 10m
    #   memory: 20Mi
    # requests:
    #   cpu: 10m
    #   memory: 20Mi

  service:
    annotations: {}
    clusterIP: ""

    ## List of IP addresses at which the default backend service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP
